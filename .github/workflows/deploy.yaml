# quckoo-org/api-tips-workflows/.github/workflows/deploy.yaml@master
name: 'Deploy'

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      short_sha:
        type: string
        required: true
      image_version:
        type: string
        required: true
      default_chart_version:
        type: string
        required: true
    secrets:
      KUBE_CONFIG:
        required: true
      HARBOR_ROBOT_TOKEN:
        required: true

env:
  HELM_EXPERIMENTAL_OCI: 1

jobs:
  deploy:
      runs-on: 'ubuntu-latest'
      if: ${{ always() && !(contains(needs.*.result, 'failure')) && !cancelled() }}
      container:
        image: ghcr.io/helmfile/helmfile:v1.0.0-rc.7
      environment: ${{ inputs.environment }}
      steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get postgres password
        run: |
          echo ${{ secrets.KUBE_CONFIG }} | base64 -d > ~/CONFIG
          export KUBECONFIG=~/CONFIG
          POSTGRES_PASSWORD=$(kubectl get secret "postgresql-bitnami" -o jsonpath="{.data.postgres-password}" | base64 -d)
          echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> $GITHUB_ENV

      - name: Deploy
        env:
          CHART_VERSION: ${{ inputs.default_chart_version }}-${{ inputs.short_sha }}
          IMAGE_TAG: ${{ inputs.image_version }}
          ENVIRONMENT: ${{ inputs.environment }}
          SECRET_NAME: ${{ vars.SECRET_NAME }}
          HARBOR_ROBOT_NAME: ${{ vars.HARBOR_ROBOT_NAME }}
          HARBOR_ROBOT_TOKEN: ${{ secrets.HARBOR_ROBOT_TOKEN }}
        run: |
          echo ${{ secrets.KUBE_CONFIG }} | base64 -d > ~/CONFIG
          export KUBECONFIG=~/CONFIG
          echo "${{ secrets.HARBOR_ROBOT_TOKEN }}" | helm registry login ${{ vars.HARBOR_HOST }} --username '${{ vars.HARBOR_ROBOT_NAME }}' --password-stdin
          helmfile -f .helm/helmfile.yaml -e "${{ env.ENVIRONMENT }}" --state-values-set "HARBOR_HOST=${{ vars.HARBOR_HOST }},HARBOR_PROJECT_NAME=${{ vars.HARBOR_PROJECT_NAME }},APPLICATION_NAME=${{ vars.APPLICATION_NAME }},CHART_VERSION=${{ env.CHART_VERSION }},IMAGE_TAG=${{ env.IMAGE_TAG }},K8S_NAMESPACE=${{ vars.K8S_NAMESPACE }},SECRET_NAME=${{ vars.SECRET_NAME }},POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}" sync
          echo "Chart version: [${{ env.CHART_VERSION }}]" >> "$GITHUB_STEP_SUMMARY"
          echo "Image version: [${{ env.IMAGE_TAG }}]" >> "$GITHUB_STEP_SUMMARY"